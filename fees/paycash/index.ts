/**
 * PayCashSwap Fees Adapter
 * 
 * This adapter calculates the fees generated by PayCashSwap based on the provided fee structure.
 * For each exchange operation in the pools, a commission of 0.25% of the exchange sum is charged.
 * - 0.2% is distributed proportionally among liquidity providers.
 * - 0.05% is directed towards the burning of the reward token Crypto Malinka (MLNK).
 * 
 * @source https://paycashswap.com/info
 */

import { Adapter, FetchOptions } from "../../adapters/types";
import { CHAIN } from "../../helpers/chains";
import { getUniqStartOfTodayTimestamp } from "../../helpers/getUniSubgraphVolume";
import { httpPost } from "../../utils/fetchURL";

const historicalVolumeEndpoint = "https://api.paycashswap.com/";
const requestBody = {
  operationName: "TotalVolume",
  query: "query TotalVolume {\n  totalVolumeChart {\n    value24h\n    lastWeekValue\n    percentageChange24h\n    points {\n      timestamp\n      value\n    }\n  }\n}\n",
  variables: {}
};


const fetch = async (options: FetchOptions) => {
  const dayTimestamp = getUniqStartOfTodayTimestamp(new Date(options.startTimestamp * 1000));
  const historicalVolume = (await httpPost(historicalVolumeEndpoint, requestBody))?.data.totalVolumeChart.points;
  const dailyVolume = historicalVolume
    .find(dayItem => (new Date(dayItem.timestamp).getTime() / 1000) === dayTimestamp)?.value;

  const totalVolume = historicalVolume
    .filter(volItem => (new Date(volItem.timestamp).getTime() / 1000) <= dayTimestamp)
    .reduce((acc, { value }) => acc + Number(value), 0)

  const dailyFees = Number(dailyVolume) * 0.0025;
  const dailyLiquidityProviderFee = Number(dailyVolume) * 0.002;
  const dailyBurnFee = Number(dailyVolume) * 0.0005;

  const totalFees = totalVolume * 0.0025;
  const totalLiquidityProviderFee = totalVolume * 0.002;
  const totalBurnFee = totalVolume * 0.0005;

  return {
    dailyFees: dailyFees,
    dailyRevenue: dailyBurnFee,
    dailyUserFees: dailyFees,
    dailyProtocolRevenue: dailyBurnFee,
    dailySupplySideRevenue: dailyLiquidityProviderFee,
    totalFees: totalFees,
    totalUserFees: totalFees,
    totalProtocolRevenue: totalBurnFee,
    totalSupplySideRevenue: totalLiquidityProviderFee
  };
};

const adapter: Adapter = {
  version: 2,
  adapter: {
    [CHAIN.EOS]: {
      fetch,
      start: '2021-04-14',
      meta: {
        methodology: "Fees are calculated based on a 0.25% commission on each exchange operation, distributed as 0.2% to liquidity providers and 0.05% for token burning."
      }
    },
  },
};

export default adapter;
