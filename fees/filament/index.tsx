import BigNumber from "bignumber.js";
import request, { gql } from "graphql-request";
import { FetchOptions, SimpleAdapter } from "../../adapters/types";
import { CHAIN } from "../../helpers/chains";

const endpoint =
  "https://api.goldsky.com/api/public/project_cm0qvthsz96sp01utcnk55ib0/subgraphs/filament-sei/v3/gn";

// Get timestamps for yesterday and today
const now = Math.floor(Date.now() / 1000); // Current timestamp in seconds
const yesterday = now - 86400; // 24 hours ago

const queryDaily = gql`
  query stats($yesterday: Int!, $now: Int!) {
    totalTradingFees(
      orderBy: block_number
      orderDirection: asc
      where: { timestamp__gte: $yesterday, timestamp__lte: $now }
    ) {
      timestamp_
      block_number
      account
      totalFees
    }
  }
`;

const queryTotal = gql`
  query stats($now: Int!) {
    totalTradingFees(
      orderBy: block_number
      orderDirection: asc
      where: { timestamp__gte: 1737397800, timestamp__lte: $now }
    ) {
      timestamp_
      block_number
      account
      totalFees
    }
  }
`;

interface IGraphResponse {
  totalTradingFees: Array<{
    timestamp_: string;
    block_number: string;
    account: string;
    totalFees: string;
  }>;
}

const methodology = {
  totalFees:
    "Tracks the cumulative fees (borrowing fees + trading fees) generated by all transactions.",
  dailyFees:
    "Tracks the fees (borrowing fees + trading fees) generated by transactions on a daily basis.",
};

const toString = (x: BigNumber) => {
  if (x.isEqualTo(0)) return undefined;
  return x.toString();
};

const fetchProtocolFees = async () => {
  // Fetch daily fees
  console.log("Now", now);
  const yesterday = now - 86400; // 24 hours ago
  console.log("Yesterday", yesterday);
  const responseDaily: IGraphResponse = await request(endpoint, queryDaily, {
    yesterday,
    now,
  });
  // console.log("Response Daily", responseDaily);
  let dailyFees = new BigNumber(0);
  responseDaily.totalTradingFees.forEach((dailyData) => {
    dailyFees = dailyFees.plus(new BigNumber(dailyData.totalFees));
  });

  // Fetch total fees
  const responseTotal: IGraphResponse = await request(endpoint, queryTotal, {
    now,
  });
  // console.log("Response Total", responseTotal);
  let totalFees = new BigNumber(0);
  responseTotal.totalTradingFees.forEach((totalData) => {
    totalFees = totalFees.plus(new BigNumber(totalData.totalFees));
  });
  console.log("Daily Fees", toString(dailyFees));
  console.log("Total Fees", toString(totalFees));
  // Daily Fees 12682234458836419524
  // Total Fees 482382219254978143

  dailyFees = dailyFees.dividedBy(new BigNumber(1e18));
  totalFees = totalFees.dividedBy(new BigNumber(1e18));

  const _dailyFees = toString(dailyFees);
  const _totalFees = toString(totalFees);

  return {
    dailyFees: _dailyFees ?? "0",
    totalFees: _totalFees ?? "0",
  };
};

const adapter: SimpleAdapter = {
  adapter: {
    [CHAIN.SEI]: {
      fetch: fetchProtocolFees,
      start: "2025-01-21",
      meta: {
        methodology,
      },
    },
  },
};
export default adapter;
