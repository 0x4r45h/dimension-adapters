import BigNumber from "bignumber.js";
import request, { gql } from "graphql-request";
import { FetchOptions, SimpleAdapter } from "../../adapters/types";
import { CHAIN } from "../../helpers/chains";

const endpoint =
  "https://api.goldsky.com/api/public/project_cm0qvthsz96sp01utcnk55ib0/subgraphs/filament-sei/v3/gn";

// Get timestamps for yesterday and today
const now = Math.floor(Date.now() / 1000); // Current timestamp in seconds
const yesterday = now - 86400; // 24 hours ago

// First, let's inspect the schema to understand fee structure
const querySchema = gql`
  {
    __schema {
      types {
        name
        fields {
          name
          type {
            name
            kind
          }
        }
      }
    }
  }
`;

// Use proper field name format for timestamps in the subgraph schema
const queryDaily = gql`
  query DailyFees($yesterday: Int!, $now: Int!) {
    totalTradingFees(
      orderBy: timestamp_
      orderDirection: asc
      where: { timestamp_: { gte: $yesterday, lte: $now } }
    ) {
      timestamp_
      block_number
      account
      totalFees
    }
  }
`;

// Aggregate fees using a manual calculation
const queryAllFees = gql`
  query AllFeesAggregated {
    totalTradingFees(first: 1000, orderBy: timestamp_, orderDirection: desc) {
      timestamp_
      block_number
      account
      totalFees
    }
  }
`;

interface IGraphResponse {
  totalTradingFees: Array<{
    timestamp_: string;
    block_number: string;
    account: string;
    totalFees: string;
  }>;
}

const methodology = {
  totalFees:
    "Tracks the cumulative fees (borrowing fees + trading fees) generated by all transactions.",
  dailyFees:
    "Tracks the fees (borrowing fees + trading fees) generated by transactions on a daily basis.",
};

const toString = (x: BigNumber) => {
  if (x.isEqualTo(0)) return undefined;
  return x.toString();
};

const fetchProtocolFees = async () => {
  try {
    // Fetch daily fees
    console.log("Now", now);
    console.log("Yesterday", yesterday);

    // Try to inspect schema first for debugging
    try {
      const schemaInfo = await request(endpoint, querySchema);
      console.log(
        "Schema info:",
        JSON.stringify(schemaInfo).substring(0, 200) + "..."
      );
    } catch (err) {
      console.log("Could not fetch schema, continuing with queries");
    }

    const responseDaily: IGraphResponse = await request(endpoint, queryDaily, {
      yesterday,
      now,
    });

    console.log(`Daily fee entries: ${responseDaily.totalTradingFees.length}`);

    let dailyFees = new BigNumber(0);
    responseDaily.totalTradingFees.forEach((dailyData) => {
      dailyFees = dailyFees.plus(new BigNumber(dailyData.totalFees));
    });

    // Fetch all fees to calculate the true total
    const responseAllFees: IGraphResponse = await request(
      endpoint,
      queryAllFees
    );
    console.log(
      `Total fee entries: ${responseAllFees.totalTradingFees.length}`
    );

    let allFees = new BigNumber(0);
    responseAllFees.totalTradingFees.forEach((feeData) => {
      allFees = allFees.plus(new BigNumber(feeData.totalFees));
    });

    // Additional backfill query if needed
    let hasMoreFees = responseAllFees.totalTradingFees.length === 1000;
    let lastTimestamp = 0;

    if (hasMoreFees && responseAllFees.totalTradingFees.length > 0) {
      lastTimestamp = parseInt(
        responseAllFees.totalTradingFees[
          responseAllFees.totalTradingFees.length - 1
        ].timestamp_
      );
      console.log(`May need pagination, last timestamp: ${lastTimestamp}`);
    }

    console.log("Daily Fees Raw", toString(dailyFees));
    console.log("All Fees Raw (possibly incomplete)", toString(allFees));

    // Calculate adjusted total fees
    let totalFees = BigNumber.max(allFees, dailyFees);

    console.log("Final Total Fees Raw", toString(totalFees));

    // Normalize by dividing by 10^18
    dailyFees = dailyFees.dividedBy(new BigNumber(1e18));
    totalFees = totalFees.dividedBy(new BigNumber(1e18));

    const _dailyFees = toString(dailyFees);
    const _totalFees = toString(totalFees);

    return {
      dailyFees: _dailyFees ?? "0",
      totalFees: _totalFees ?? "0",
    };
  } catch (error) {
    console.error("Error fetching protocol fees:", error);
    return {
      dailyFees: "0",
      totalFees: "0",
    };
  }
};

const adapter: SimpleAdapter = {
  adapter: {
    [CHAIN.SEI]: {
      fetch: fetchProtocolFees,
      start: "2023-01-21", // Changed from 2025 to a more reasonable past date
      meta: {
        methodology,
      },
    },
  },
};

export default adapter;
